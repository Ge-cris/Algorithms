#include <stdio.h>

struct node{
	int data;
	struct node *next;
};
struct node *head = NULL;
struct node *current = NULL;

//display the list
void printList(void){
	struct node *p = head;
	printf("\n[");
	//start from the begining
	while(p != NULL){
		printf(" %d", p->data);
		p = p->next;
	}
	printf("]");
}

//insertion at the begining
void insertatbegin(int data){
	//create a link
	struct node *lk = (struct node*) malloc(sizeof(struct node));
	lk->data = data;
	//point it to old first node
	lk->next = head;
	//point first to new first node
	head = lk;
}
//insertion at the end
void insertatend(int data){
	//create a link
	struct node *lk = (struct node*) malloc(sizeof(struct node));
	lk->data = data;
	struct node *linkedlist = head;
	//point it to old first node
	while (linkedlist->next != NULL)
		linkedlist = linkedlist->next;
	//point first to new first node
	linkedlist->next = lk;
}
//insert after node
void insertafternode(struct node *list, int data){
	struct node *lk = (struct node*) malloc(sizeof(struct node));
	lk->data = data;
	lk->next = list->next;
	list->next = lk;
}
void deleteatbegin(void){
	head = head->next;
}
void deleteatend(void){
	struct node *linkedlist = head;
	while(linkedlist->next->next != NULL)
		linkedlist = linkedlist->next;
	linkedlist->next = NULL;
}
void deletenode(int key){
	struct node *temp = head, *prev;
	//if the key is in the head
	if(temp != NULL && temp-> data == key){
		head = temp->next;
		return;
	}
	//find the key to be deleted
	while(temp != NULL && temp->data != key){
		prev = temp;
		temp = temp->next;
	}
	//if the key is not present
	if (temp == NULL)
		return;
	//remove the node
	prev->next = temp->next;
}
int searchlist (int key){
	struct node *temp = head;
	while(temp != NULL){
		if (temp->data == key)
			return 1;
		temp = temp->next;
	}
	return 0;
}
int main(void) {
	int k = 0;
	insertatbegin(12);
	insertatbegin(22);
	insertatbegin(30);
	insertatbegin(44);
	insertatbegin(50);
	insertafternode(head->next->next, 33);
	printf("Linked list: ");
	printList();
	
	deleteatbegin();
	deleteatend();
	deletenode(12);
	printf("\nLinkedlist after deletion: ");
	printList();
	
	insertatbegin(4);
	insertatbegin(16);
	printf("\nUpdated linkedlist: ");
	printList();
	
	k = searchlist(1);
	if (k == 1)
		printf("\n Element was found");
	else
		printf("\n Element was not found in the list.");
	
	return 0;
}
